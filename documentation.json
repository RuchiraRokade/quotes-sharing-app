{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-d2b787cf3c12f2c5ead468371d6cddd5",
            "file": "src/app/store/app.state.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport * as quote from '../quote-store/reducers/quote.reducer';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nexport interface AppState {\r\n    authState: auth.State;\r\n    quote: quote.State;\r\n}\r\n\r\nexport const reducers = {\r\n    auth: auth.reducer,\r\n    quote: quote.reducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const quoteState = createFeatureSelector<AppState>('quote');\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "quote",
                    "type": "quote.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-c1625226c5762657c3b778f7436eca79-1",
            "file": "src/app/sign-up/store/app.state.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport * as quote from '../../quote/quote-store/reducers/quote.reducer';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  quote: quote.State;\r\n}\r\n\r\nexport const reducers = {\r\n  auth: auth.reducer,\r\n  quote: quote.reducer,\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const quoteState = createFeatureSelector<AppState>('quote');\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "quote",
                    "type": "quote.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppState-1"
        },
        {
            "name": "Quote",
            "id": "interface-Quote-824f91bb8f07909e5c2717a7cad03174",
            "file": "src/app/models/quote.ts",
            "type": "interface",
            "sourceCode": "export interface Quote {\r\n     quote: string;\r\n     description: string;\r\n     author: string;\r\n     category: string;\r\n     id?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "quote",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Quote",
            "id": "interface-Quote-824f91bb8f07909e5c2717a7cad03174-1",
            "file": "src/app/core/models/quote.ts",
            "type": "interface",
            "sourceCode": "export interface Quote {\r\n     quote: string;\r\n     description: string;\r\n     author: string;\r\n     category: string;\r\n     id?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "quote",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Quote-1"
        },
        {
            "name": "QuoteState",
            "id": "interface-QuoteState-339d2accab6edd3a05b43aba25e8de03",
            "file": "src/app/quote-store/quote.state.ts",
            "type": "interface",
            "sourceCode": "import { Quote } from '../models/quote';\r\nexport interface QuoteState {\r\n    readonly quotes: Quote[];\r\n}\r\n",
            "properties": [
                {
                    "name": "quotes",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "QuoteState",
            "id": "interface-QuoteState-139ad524789d1349725eddab19b2a64c-1",
            "file": "src/app/quote/quote-store/quote.state.ts",
            "type": "interface",
            "sourceCode": "import { Quote } from '../../core/models/quote';\r\nexport interface QuoteState {\r\n  readonly quotes: Quote[];\r\n}\r\n",
            "properties": [
                {
                    "name": "quotes",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "QuoteState-1"
        },
        {
            "name": "State",
            "id": "interface-State-375df879c371c2da26f2d9f508f2d6d9",
            "file": "src/app/quote-store/reducers/quote.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Quote } from '../../models/quote';\r\nimport {\r\n  QuoteActions, ADD_QUOTE, GET_QUOTES,\r\n  DELETE_QUOTES, UPDATE_QUOTES, DATA_LOAD, ADD_QUOTE_SUCCESS,\r\n  UPDATE_QUOTE_SUCCESS, DELETE_QUOTE_SUCCESS\r\n} from '../actions/quote.actions';\r\n\r\nexport interface State {\r\n  quote: Quote[];\r\n  success: boolean | null;\r\n  message: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  quote: [],\r\n  message: null,\r\n  success: null\r\n};\r\nexport function reducer(state: State = initialState, action: QuoteActions): State {\r\n    switch (action.type) {\r\n        case ADD_QUOTE: {\r\n        return {\r\n          ...state\r\n        };\r\n        }\r\n        case GET_QUOTES: {\r\n            return {\r\n              ...state,\r\n            };\r\n      }\r\n        case DELETE_QUOTES: {\r\n            return {\r\n                    ...state\r\n            };\r\n        }\r\n      case UPDATE_QUOTES: {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      case DATA_LOAD: {\r\n        return {\r\n          quote: action.payload,\r\n          message: null,\r\n          success: null\r\n        };\r\n      }\r\n      case ADD_QUOTE_SUCCESS: {\r\n        return {\r\n          quote: [...state.quote, action.payload],\r\n          message: 'The quote is added successfully!',\r\n          success: true\r\n        };\r\n      }\r\n        case UPDATE_QUOTE_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            message: 'The quote is updated successfully!',\r\n            success: true\r\n          };\r\n      }\r\n      case DELETE_QUOTE_SUCCESS: {\r\n        return {\r\n          ...state\r\n        };\r\n        }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "quote",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "success",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-28e5e9d00583aff5599e241ffd55d702-1",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../models/User';\r\nimport { AuthActionTypes, AuthAction } from '../actions/user.actions';\r\n\r\nexport interface State {\r\n    isAuthenticated: boolean;\r\n    user: User | null;\r\n    errorMessage: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n};\r\nexport function reducer(state = initialState, action: AuthAction): State {\r\n    switch (action.type) {\r\n      case AuthActionTypes.LOGIN_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          user: {\r\n              email: action.payload.email,\r\n              password: action.payload.password\r\n          },\r\n          errorMessage: null\r\n        };\r\n        }\r\n        case AuthActionTypes.LOGIN_FAILURE: {\r\n            return {\r\n                ...state,\r\n                errorMessage: 'Incorrect email and/or password.'\r\n            };\r\n      }\r\n      case AuthActionTypes.SIGNUP_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          user: action.payload,\r\n          errorMessage: null\r\n        };\r\n      }\r\n      case AuthActionTypes.SIGNUP_FAILURE: {\r\n        return {\r\n          ...state,\r\n          errorMessage: 'That email is already in use.'\r\n        };\r\n      }\r\n      case AuthActionTypes.LOGOUT: {\r\n        return initialState;\r\n        }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-566f8dd634575f2dfe1d1a9359c33dc6-2",
            "file": "src/app/quote/quote-store/reducers/quote.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Quote } from '../../../core/models/quote';\r\nimport {\r\n  QuoteActions,\r\n  ADD_QUOTE,\r\n  GET_QUOTES,\r\n  DELETE_QUOTES,\r\n  UPDATE_QUOTES,\r\n  DATA_LOAD,\r\n  ADD_QUOTE_SUCCESS,\r\n  UPDATE_QUOTE_SUCCESS,\r\n  DELETE_QUOTE_SUCCESS,\r\n} from '../actions/quote.actions';\r\n\r\nexport interface State {\r\n  quote: Quote[];\r\n  success: boolean | null;\r\n  message: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  quote: [],\r\n  message: null,\r\n  success: null,\r\n};\r\nexport function reducer(\r\n  state: State = initialState,\r\n  action: QuoteActions\r\n): State {\r\n  switch (action.type) {\r\n    case ADD_QUOTE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case GET_QUOTES: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case DELETE_QUOTES: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPDATE_QUOTES: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case DATA_LOAD: {\r\n      return {\r\n        quote: action.payload,\r\n        message: null,\r\n        success: null,\r\n      };\r\n    }\r\n    case ADD_QUOTE_SUCCESS: {\r\n      return {\r\n        quote: [...state.quote, action.payload],\r\n        message: 'The quote is added successfully!',\r\n        success: true,\r\n      };\r\n    }\r\n    case UPDATE_QUOTE_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        message: 'The quote is updated successfully!',\r\n        success: true,\r\n      };\r\n    }\r\n    case DELETE_QUOTE_SUCCESS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "quote",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "success",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-8d9e963f980f1f2f277e07378101edcb-3",
            "file": "src/app/sign-up/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../../core/models/User';\r\nimport { AuthActionTypes, AuthAction } from '../actions/user.actions';\r\n\r\nexport interface State {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  errorMessage: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n};\r\nexport function reducer(state = initialState, action: AuthAction): State {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          email: action.payload.email,\r\n          password: action.payload.password,\r\n        },\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Incorrect email and/or password.',\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload,\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'That email is already in use.',\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGOUT: {\r\n      return initialState;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "User",
            "id": "interface-User-5172ca06c516832622f10b16859c25b0",
            "file": "src/app/models/User.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    id?: number;\r\n    name?: string;\r\n    email: string;\r\n    password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-5172ca06c516832622f10b16859c25b0-1",
            "file": "src/app/core/models/User.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    id?: number;\r\n    name?: string;\r\n    email: string;\r\n    password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-761f04ba310b4b2026962c2fef0fa830",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    map((action: LogIn) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.login(payload).pipe(\r\n        map((user) => {\r\n          if (user.length > 0) {\r\n            return new LogInSuccess({ email: payload.email });\r\n          } else {\r\n            return new LogInFailure({ error: 'Invalid credentials' });\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE),\r\n    tap((err) => {\r\n      this.authService.errorMessage = err.payload.error;\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', JSON.stringify(user.payload));\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "Logout",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('user');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    map((action: SignUp) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.signUp(payload).pipe(\r\n        map((data) => {\r\n          return new SignUpSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n    tap((user) => {})\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>TODO: Combine signupFailure and login failure to create a single effect</p>\n",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', user.payload);\r\n      this.router.navigateByUrl('login');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport {\r\n  AuthActionTypes,\r\n  LogIn,\r\n  LogInFailure,\r\n  LogInSuccess,\r\n  SignUp,\r\n  SignUpSuccess,\r\n} from '../actions/user.actions';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  /**\r\n   *\r\n   */\r\n  constructor(\r\n    private actions: Actions,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n  @Effect({ dispatch: false })\r\n  LogInSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', JSON.stringify(user.payload));\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInFailure: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE),\r\n    tap((err) => {\r\n      this.authService.errorMessage = err.payload.error;\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  LogIn: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    map((action: LogIn) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.login(payload).pipe(\r\n        map((user) => {\r\n          if (user.length > 0) {\r\n            return new LogInSuccess({ email: payload.email });\r\n          } else {\r\n            return new LogInFailure({ error: 'Invalid credentials' });\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  SignUpSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', user.payload);\r\n      this.router.navigateByUrl('login');\r\n    })\r\n  );\r\n  /**\r\n   * TODO: Combine signupFailure and login failure to create a single effect\r\n   */\r\n  @Effect({ dispatch: false })\r\n  SignUpFailure: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n    tap((user) => {})\r\n  );\r\n  @Effect()\r\n  SignUp: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    map((action: SignUp) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.signUp(payload).pipe(\r\n        map((data) => {\r\n          return new SignUpSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  Logout: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('user');\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-89546a8369019ea6c0587acc95a53547-1",
            "file": "src/app/sign-up/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    map((action: LogIn) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.login(payload).pipe(\r\n        map((user) => {\r\n          if (user.length > 0) {\r\n            return new LogInSuccess({ email: payload.email });\r\n          } else {\r\n            return new LogInFailure({ error: 'Invalid credentials' });\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE),\r\n    tap((err) => {\r\n      this.authService.errorMessage = err.payload.error;\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', JSON.stringify(user.payload));\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "Logout",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('user');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    map((action: SignUp) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.signUp(payload).pipe(\r\n        map((data) => {\r\n          return new SignUpSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n    tap((user) => {})\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>TODO: Combine signupFailure and login failure to create a single effect</p>\n",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', user.payload);\r\n      this.router.navigateByUrl('login');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\nimport {\r\n  AuthActionTypes,\r\n  LogIn,\r\n  LogInFailure,\r\n  LogInSuccess,\r\n  SignUp,\r\n  SignUpSuccess,\r\n} from '../actions/user.actions';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  /**\r\n   *\r\n   */\r\n  constructor(\r\n    private actions: Actions,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n  @Effect({ dispatch: false })\r\n  LogInSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', JSON.stringify(user.payload));\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInFailure: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE),\r\n    tap((err) => {\r\n      this.authService.errorMessage = err.payload.error;\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  LogIn: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    map((action: LogIn) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.login(payload).pipe(\r\n        map((user) => {\r\n          if (user.length > 0) {\r\n            return new LogInSuccess({ email: payload.email });\r\n          } else {\r\n            return new LogInFailure({ error: 'Invalid credentials' });\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  SignUpSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', user.payload);\r\n      this.router.navigateByUrl('login');\r\n    })\r\n  );\r\n  /**\r\n   * TODO: Combine signupFailure and login failure to create a single effect\r\n   */\r\n  @Effect({ dispatch: false })\r\n  SignUpFailure: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n    tap((user) => {})\r\n  );\r\n  @Effect()\r\n  SignUp: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    map((action: SignUp) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.signUp(payload).pipe(\r\n        map((data) => {\r\n          return new SignUpSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  Logout: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('user');\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AuthEffects-1"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-18d4ca83d2eaffa7b763add3101a14d7",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'http://localhost:3000/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "errorStatusMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { User } from '../models/User';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  readonly BASE_URL = 'http://localhost:3000/';\r\n  private errorStatusMessage: string;\r\n  get errorMessage(): string {\r\n    return this.errorStatusMessage;\r\n  }\r\n  set errorMessage(msg: string) {\r\n    this.errorStatusMessage = msg;\r\n  }\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: User): Observable<User[]> {\r\n    const loginUrl = encodeURI(\r\n      'users?email=' + user.email + '&password=' + user.password\r\n    );\r\n    return this.http\r\n      .get<User[]>(this.BASE_URL + loginUrl)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  signUp(user: User): Observable<User> {\r\n    const signUpUrl = encodeURI('users');\r\n    return this.http\r\n      .post<User>(this.BASE_URL + signUpUrl, user, this.httpOptions)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  errorCatcher(error: any): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "args": [
                            {
                                "name": "msg",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "msg",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-18d4ca83d2eaffa7b763add3101a14d7-1",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'http://localhost:3000/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "errorStatusMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { User } from '../models/User';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  readonly BASE_URL = 'http://localhost:3000/';\r\n  private errorStatusMessage: string;\r\n  get errorMessage(): string {\r\n    return this.errorStatusMessage;\r\n  }\r\n  set errorMessage(msg: string) {\r\n    this.errorStatusMessage = msg;\r\n  }\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: User): Observable<User[]> {\r\n    const loginUrl = encodeURI(\r\n      'users?email=' + user.email + '&password=' + user.password\r\n    );\r\n    return this.http\r\n      .get<User[]>(this.BASE_URL + loginUrl)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  signUp(user: User): Observable<User> {\r\n    const signUpUrl = encodeURI('users');\r\n    return this.http\r\n      .post<User>(this.BASE_URL + signUpUrl, user, this.httpOptions)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  errorCatcher(error: any): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "args": [
                            {
                                "name": "msg",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "msg",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AuthService-1"
        },
        {
            "name": "QuoteEffects",
            "id": "injectable-QuoteEffects-63dace07e79ceee54cae8a789ce8262b",
            "file": "src/app/quote-store/effects/quote.effects.ts",
            "properties": [
                {
                    "name": "CreateQuotes",
                    "defaultValue": "this.actions.pipe(\r\n            ofType(ADD_QUOTE),\r\n            map((action: AddQuote) => action.payload),\r\n            mergeMap(payload => {\r\n                return this.quoteService.createQuote(payload).pipe(\r\n                    map((data) => {\r\n                        if (data) {\r\n                            return new AddQuoteSuccess(data);\r\n                        }\r\n                    }));\r\n            }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteQuote",
                    "defaultValue": "this.actions.pipe(\r\n                        ofType(DELETE_QUOTES),\r\n                        map((action: DeleteQuotes) => action.payload),\r\n                        mergeMap(payload => {\r\n                            return this.quoteService.deleteQuote(payload).pipe(\r\n                                map((data) => {\r\n                                    return new DeleteQuoteSuccess();\r\n                                }));\r\n                        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "GetQuotes",
                    "defaultValue": "this.actions.pipe(\r\n                ofType(GET_QUOTES),\r\n                map((action: GetQuotes) => action),\r\n                mergeMap(payload => {\r\n                    return this.quoteService.getAllQuotes().pipe(\r\n                        map((data) => {\r\n                            return new LoadDataSuccess(data);\r\n                        }));\r\n                }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateQuotes",
                    "defaultValue": "this.actions.pipe(\r\n                    ofType(UPDATE_QUOTES),\r\n                    map((action: UpdateQuote) => action.payload),\r\n                    mergeMap(payload => {\r\n                        return this.quoteService.updateQuote(payload).pipe(\r\n                            map((data) => {\r\n                                if (data) {\r\n                                    return new UpdateQuoteSuccess(data);\r\n                                }\r\n                            }));\r\n                    }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { QuotesService } from '../../services/quotes.service';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { map, switchMap, tap, mergeMap, take, pluck } from 'rxjs/operators';\r\nimport {\r\n    QuoteActions, ADD_QUOTE, GET_QUOTES,\r\n    DELETE_QUOTES, UPDATE_QUOTES, GetQuotes,\r\n    LoadDataSuccess, AddQuoteSuccess, AddQuote,\r\n    DeleteQuotes, UpdateQuote, UpdateQuoteSuccess, DeleteQuoteSuccess\r\n} from '../actions/quote.actions';\r\nimport { Quote } from '../../models/quote';\r\nimport { ClassGetter } from '@angular/compiler/src/output/output_ast';\r\n\r\n@Injectable()\r\nexport class QuoteEffects {\r\n constructor(private quoteService: QuotesService, private actions: Actions) {\r\n    }\r\n    @Effect({dispatch: true})\r\n    GetQuotes: Observable<any> =  this.actions.pipe(\r\n                ofType(GET_QUOTES),\r\n                map((action: GetQuotes) => action),\r\n                mergeMap(payload => {\r\n                    return this.quoteService.getAllQuotes().pipe(\r\n                        map((data) => {\r\n                            return new LoadDataSuccess(data);\r\n                        }));\r\n                }));\r\n//     @Effect({ dispatch: false })\r\n//     LogInSuccess: Observable<any> = this.actions.pipe(\r\n//       ofType(GET_QUOTES),\r\n//       tap((user) => {\r\n//         localStorage.setItem('user', JSON.stringify(user.payload));\r\n//         this.router.navigateByUrl('/');\r\n//       })\r\n// );\r\n@Effect({dispatch: true})\r\n    CreateQuotes: Observable<any> =  this.actions.pipe(\r\n            ofType(ADD_QUOTE),\r\n            map((action: AddQuote) => action.payload),\r\n            mergeMap(payload => {\r\n                return this.quoteService.createQuote(payload).pipe(\r\n                    map((data) => {\r\n                        if (data) {\r\n                            return new AddQuoteSuccess(data);\r\n                        }\r\n                    }));\r\n            }));\r\n            @Effect({dispatch: true})\r\n            DeleteQuote: Observable<any> =  this.actions.pipe(\r\n                        ofType(DELETE_QUOTES),\r\n                        map((action: DeleteQuotes) => action.payload),\r\n                        mergeMap(payload => {\r\n                            return this.quoteService.deleteQuote(payload).pipe(\r\n                                map((data) => {\r\n                                    return new DeleteQuoteSuccess();\r\n                                }));\r\n                        }));\r\n            @Effect({dispatch: true})\r\n            UpdateQuotes: Observable<any> =  this.actions.pipe(\r\n                    ofType(UPDATE_QUOTES),\r\n                    map((action: UpdateQuote) => action.payload),\r\n                    mergeMap(payload => {\r\n                        return this.quoteService.updateQuote(payload).pipe(\r\n                            map((data) => {\r\n                                if (data) {\r\n                                    return new UpdateQuoteSuccess(data);\r\n                                }\r\n                            }));\r\n                    }));\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "quoteService",
                        "type": "QuotesService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "quoteService",
                        "type": "QuotesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuoteEffects",
            "id": "injectable-QuoteEffects-0ec384ff58118d20c452343f1133acd3-1",
            "file": "src/app/quote/quote-store/effects/quote.effects.ts",
            "properties": [
                {
                    "name": "CreateQuotes",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(ADD_QUOTE),\r\n    map((action: AddQuote) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.createQuote(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new AddQuoteSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteQuote",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(DELETE_QUOTES),\r\n    map((action: DeleteQuotes) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.deleteQuote(payload).pipe(\r\n        map((data) => {\r\n          return new DeleteQuoteSuccess();\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "GetQuotes",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(GET_QUOTES),\r\n    map((action: GetQuotes) => action),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.getAllQuotes().pipe(\r\n        map((data) => {\r\n          return new LoadDataSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateQuotes",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(UPDATE_QUOTES),\r\n    map((action: UpdateQuote) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.updateQuote(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new UpdateQuoteSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { QuotesService } from '../../../core/services/quotes.service';\r\nimport {\r\n  AddQuote,\r\n  AddQuoteSuccess,\r\n  ADD_QUOTE,\r\n  DeleteQuotes,\r\n  DeleteQuoteSuccess,\r\n  DELETE_QUOTES,\r\n  GetQuotes,\r\n  GET_QUOTES,\r\n  LoadDataSuccess,\r\n  UpdateQuote,\r\n  UpdateQuoteSuccess,\r\n  UPDATE_QUOTES,\r\n} from '../actions/quote.actions';\r\n\r\n@Injectable()\r\nexport class QuoteEffects {\r\n  constructor(private quoteService: QuotesService, private actions: Actions) {}\r\n  @Effect({ dispatch: true })\r\n  GetQuotes: Observable<any> = this.actions.pipe(\r\n    ofType(GET_QUOTES),\r\n    map((action: GetQuotes) => action),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.getAllQuotes().pipe(\r\n        map((data) => {\r\n          return new LoadDataSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  );\r\n  //     @Effect({ dispatch: false })\r\n  //     LogInSuccess: Observable<any> = this.actions.pipe(\r\n  //       ofType(GET_QUOTES),\r\n  //       tap((user) => {\r\n  //         localStorage.setItem('user', JSON.stringify(user.payload));\r\n  //         this.router.navigateByUrl('/');\r\n  //       })\r\n  // );\r\n  @Effect({ dispatch: true })\r\n  CreateQuotes: Observable<any> = this.actions.pipe(\r\n    ofType(ADD_QUOTE),\r\n    map((action: AddQuote) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.createQuote(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new AddQuoteSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n  @Effect({ dispatch: true })\r\n  DeleteQuote: Observable<any> = this.actions.pipe(\r\n    ofType(DELETE_QUOTES),\r\n    map((action: DeleteQuotes) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.deleteQuote(payload).pipe(\r\n        map((data) => {\r\n          return new DeleteQuoteSuccess();\r\n        })\r\n      );\r\n    })\r\n  );\r\n  @Effect({ dispatch: true })\r\n  UpdateQuotes: Observable<any> = this.actions.pipe(\r\n    ofType(UPDATE_QUOTES),\r\n    map((action: UpdateQuote) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.quoteService.updateQuote(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new UpdateQuoteSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "quoteService",
                        "type": "QuotesService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "quoteService",
                        "type": "QuotesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "QuoteEffects-1"
        },
        {
            "name": "QuotesService",
            "id": "injectable-QuotesService-904e8fea18a7e313f70c621cb11482e0",
            "file": "src/app/services/quotes.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'http://localhost:3000/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "quoteUrl",
                    "defaultValue": "'quotes'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "createQuote",
                    "args": [
                        {
                            "name": "quote",
                            "type": "Quote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "quote",
                            "type": "Quote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteQuote",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllQuotes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Quote[]>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getByQuoteId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateQuote",
                    "args": [
                        {
                            "name": "updatedQuote",
                            "type": "Quote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "updatedQuote",
                            "type": "Quote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Quote } from '../models/quote';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuotesService {\r\n  readonly BASE_URL = 'http://localhost:3000/';\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  quoteUrl = 'quotes';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getAllQuotes(): Observable<Quote[]> {\r\n    const getAllQuotesUrl = encodeURI('quotes');\r\n    return this.http\r\n      .get<Quote[]>(`${this.BASE_URL + getAllQuotesUrl}`)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public createQuote(quote: Quote): Observable<Quote> {\r\n    const createUrl = encodeURI('quotes');\r\n    return this.http\r\n      .post<Quote>(`${this.BASE_URL + createUrl}`, quote, this.httpOptions)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public updateQuote(updatedQuote: Quote): Observable<Quote> {\r\n    const updateQuoteUrl = encodeURI(`quotes/${updatedQuote.id}`);\r\n    return this.http\r\n      .patch<Quote>(\r\n        `${this.BASE_URL + updateQuoteUrl}`,\r\n        updatedQuote,\r\n        this.httpOptions\r\n      )\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public getByQuoteId(id: number): Observable<Quote> {\r\n    return this.http\r\n      .get<Quote>(this.BASE_URL + 'quotes/' + id)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public deleteQuote(id: number): Observable<Quote> {\r\n    const deleteQuoteUrl = encodeURI(`quotes/${id}`);\r\n    return this.http\r\n      .delete<Quote>(`${this.BASE_URL + deleteQuoteUrl}`)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  errorCatcher(error: any): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuotesService",
            "id": "injectable-QuotesService-904e8fea18a7e313f70c621cb11482e0-1",
            "file": "src/app/core/services/quotes.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'http://localhost:3000/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "quoteUrl",
                    "defaultValue": "'quotes'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "createQuote",
                    "args": [
                        {
                            "name": "quote",
                            "type": "Quote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "quote",
                            "type": "Quote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteQuote",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllQuotes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Quote[]>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getByQuoteId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateQuote",
                    "args": [
                        {
                            "name": "updatedQuote",
                            "type": "Quote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Quote>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "updatedQuote",
                            "type": "Quote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Quote } from '../models/quote';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuotesService {\r\n  readonly BASE_URL = 'http://localhost:3000/';\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  quoteUrl = 'quotes';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getAllQuotes(): Observable<Quote[]> {\r\n    const getAllQuotesUrl = encodeURI('quotes');\r\n    return this.http\r\n      .get<Quote[]>(`${this.BASE_URL + getAllQuotesUrl}`)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public createQuote(quote: Quote): Observable<Quote> {\r\n    const createUrl = encodeURI('quotes');\r\n    return this.http\r\n      .post<Quote>(`${this.BASE_URL + createUrl}`, quote, this.httpOptions)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public updateQuote(updatedQuote: Quote): Observable<Quote> {\r\n    const updateQuoteUrl = encodeURI(`quotes/${updatedQuote.id}`);\r\n    return this.http\r\n      .patch<Quote>(\r\n        `${this.BASE_URL + updateQuoteUrl}`,\r\n        updatedQuote,\r\n        this.httpOptions\r\n      )\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public getByQuoteId(id: number): Observable<Quote> {\r\n    return this.http\r\n      .get<Quote>(this.BASE_URL + 'quotes/' + id)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  public deleteQuote(id: number): Observable<Quote> {\r\n    const deleteQuoteUrl = encodeURI(`quotes/${id}`);\r\n    return this.http\r\n      .delete<Quote>(`${this.BASE_URL + deleteQuoteUrl}`)\r\n      .pipe(catchError(this.errorCatcher));\r\n  }\r\n\r\n  errorCatcher(error: any): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "QuotesService-1"
        }
    ],
    "classes": [
        {
            "name": "AddQuote",
            "id": "class-AddQuote-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_QUOTE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddQuote",
            "id": "class-AddQuote-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_QUOTE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AddQuote-1"
        },
        {
            "name": "AddQuoteSuccess",
            "id": "class-AddQuoteSuccess-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_QUOTE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddQuoteSuccess",
            "id": "class-AddQuoteSuccess-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_QUOTE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AddQuoteSuccess-1"
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteQuotes",
            "id": "class-DeleteQuotes-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_QUOTES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteQuotes",
            "id": "class-DeleteQuotes-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_QUOTES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DeleteQuotes-1"
        },
        {
            "name": "DeleteQuoteSuccess",
            "id": "class-DeleteQuoteSuccess-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_QUOTE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteQuoteSuccess",
            "id": "class-DeleteQuoteSuccess-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_QUOTE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DeleteQuoteSuccess-1"
        },
        {
            "name": "GetQuotes",
            "id": "class-GetQuotes-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "GET_QUOTES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetQuotes",
            "id": "class-GetQuotes-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "GET_QUOTES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GetQuotes-1"
        },
        {
            "name": "LoadDataSuccess",
            "id": "class-LoadDataSuccess-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote[]"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DATA_LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadDataSuccess",
            "id": "class-LoadDataSuccess-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote[]"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DATA_LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoadDataSuccess-1"
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-0be07ab2fe37c86f044da1dab7706326",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../models/User';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-4c77c6c8e493f54275340af011f9f6c3-1",
            "file": "src/app/sign-up/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../../core/models/User';\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[AUTH] LogIn',\r\n  SIGNUP = '[AUTH] SignUp',\r\n  LOGOUT = '[AUTH] LogOut',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n  SIGNUP_FAILURE = '[Auth] SignUp Failure',\r\n}\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LogIn-1"
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-0be07ab2fe37c86f044da1dab7706326",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../models/User';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-4c77c6c8e493f54275340af011f9f6c3-1",
            "file": "src/app/sign-up/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../../core/models/User';\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[AUTH] LogIn',\r\n  SIGNUP = '[AUTH] SignUp',\r\n  LOGOUT = '[AUTH] LogOut',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n  SIGNUP_FAILURE = '[Auth] SignUp Failure',\r\n}\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LogInFailure-1"
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-0be07ab2fe37c86f044da1dab7706326",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../models/User';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-4c77c6c8e493f54275340af011f9f6c3-1",
            "file": "src/app/sign-up/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../../core/models/User';\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[AUTH] LogIn',\r\n  SIGNUP = '[AUTH] SignUp',\r\n  LOGOUT = '[AUTH] LogOut',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n  SIGNUP_FAILURE = '[Auth] SignUp Failure',\r\n}\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LogInSuccess-1"
        },
        {
            "name": "Logout",
            "id": "class-Logout-0be07ab2fe37c86f044da1dab7706326",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../models/User';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Logout",
            "id": "class-Logout-4c77c6c8e493f54275340af011f9f6c3-1",
            "file": "src/app/sign-up/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../../core/models/User';\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[AUTH] LogIn',\r\n  SIGNUP = '[AUTH] SignUp',\r\n  LOGOUT = '[AUTH] LogOut',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n  SIGNUP_FAILURE = '[Auth] SignUp Failure',\r\n}\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Logout-1"
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-0be07ab2fe37c86f044da1dab7706326",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../models/User';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-4c77c6c8e493f54275340af011f9f6c3-1",
            "file": "src/app/sign-up/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../../core/models/User';\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[AUTH] LogIn',\r\n  SIGNUP = '[AUTH] SignUp',\r\n  LOGOUT = '[AUTH] LogOut',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n  SIGNUP_FAILURE = '[Auth] SignUp Failure',\r\n}\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SignUp-1"
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-0be07ab2fe37c86f044da1dab7706326",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../models/User';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-4c77c6c8e493f54275340af011f9f6c3-1",
            "file": "src/app/sign-up/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../../core/models/User';\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[AUTH] LogIn',\r\n  SIGNUP = '[AUTH] SignUp',\r\n  LOGOUT = '[AUTH] LogOut',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n  SIGNUP_FAILURE = '[Auth] SignUp Failure',\r\n}\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SignUpFailure-1"
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-0be07ab2fe37c86f044da1dab7706326",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../models/User';\r\nexport enum AuthActionTypes {\r\n    LOGIN = '[AUTH] LogIn',\r\n    SIGNUP = '[AUTH] SignUp',\r\n    LOGOUT = '[AUTH] LogOut',\r\n    LOGIN_SUCCESS = '[Auth] Login Success',\r\n    LOGIN_FAILURE = '[Auth] Login Failure',\r\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\r\n}\r\nexport class LogIn implements Action {\r\n    readonly type = AuthActionTypes.LOGIN;\r\n    constructor(public payload: User) {\r\n    }\r\n}\r\nexport class LogInSuccess implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n    constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n    constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n    readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-4c77c6c8e493f54275340af011f9f6c3-1",
            "file": "src/app/sign-up/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../../core/models/User';\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[AUTH] LogIn',\r\n  SIGNUP = '[AUTH] SignUp',\r\n  LOGOUT = '[AUTH] LogOut',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP_SUCCESS = '[Auth] SignUp Success',\r\n  SIGNUP_FAILURE = '[Auth] SignUp Failure',\r\n}\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SignUpSuccess-1"
        },
        {
            "name": "UpdateQuote",
            "id": "class-UpdateQuote-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_QUOTES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateQuote",
            "id": "class-UpdateQuote-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_QUOTES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "UpdateQuote-1"
        },
        {
            "name": "UpdateQuoteSuccess",
            "id": "class-UpdateQuoteSuccess-2df22319d1f5e2eb4a0871dc5219a8b1",
            "file": "src/app/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../models/quote';\r\n\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n    readonly type = ADD_QUOTE;\r\n    constructor(public payload: Quote) {\r\n    }\r\n}\r\nexport class GetQuotes implements Action {\r\n    readonly type = GET_QUOTES;\r\n    constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n    readonly type = DELETE_QUOTES;\r\n    constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n    readonly type = DATA_LOAD;\r\n    constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n    readonly type = ADD_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n    readonly type = UPDATE_QUOTE_SUCCESS;\r\n    constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n    readonly type = DELETE_QUOTE_SUCCESS;\r\n  }\r\nexport type QuoteActions =\r\n    AddQuote |\r\n    GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_QUOTE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateQuoteSuccess",
            "id": "class-UpdateQuoteSuccess-107f62823d2dfb2f089465d938a19591-1",
            "file": "src/app/quote/quote-store/actions/quote.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Quote } from '../../../core/models/quote';\r\n\r\nexport const ADD_QUOTE = '[QUOTE] ADD';\r\nexport const GET_QUOTES = '[QUOTE] GET';\r\nexport const DELETE_QUOTES = '[QUOTE] DELETE';\r\nexport const UPDATE_QUOTES = '[QUOTE] UPDATE';\r\nexport const DATA_LOAD = '[QUOTE] LOAD';\r\nexport const ADD_QUOTE_SUCCESS = '[QUOTE] ADD QUOTE SUCCESS';\r\nexport const UPDATE_QUOTE_SUCCESS = '[QUOTE] UPDATE QUOTE SUCCESS';\r\nexport const DELETE_QUOTE_SUCCESS = '[QUOTE] DELETE QUOTE SUCCESS';\r\n\r\nexport class AddQuote implements Action {\r\n  readonly type = ADD_QUOTE;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class GetQuotes implements Action {\r\n  readonly type = GET_QUOTES;\r\n  constructor() {}\r\n}\r\nexport class DeleteQuotes implements Action {\r\n  readonly type = DELETE_QUOTES;\r\n  constructor(public payload: number) {}\r\n}\r\nexport class UpdateQuote implements Action {\r\n  readonly type = UPDATE_QUOTES;\r\n  constructor(public payload: Quote) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Quote[]) {}\r\n}\r\nexport class AddQuoteSuccess implements Action {\r\n  readonly type = ADD_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class UpdateQuoteSuccess implements Action {\r\n  readonly type = UPDATE_QUOTE_SUCCESS;\r\n  constructor(public payload: Quote) {}\r\n}\r\nexport class DeleteQuoteSuccess implements Action {\r\n  readonly type = DELETE_QUOTE_SUCCESS;\r\n}\r\nexport type QuoteActions =\r\n  | AddQuote\r\n  | GetQuotes\r\n  | DeleteQuotes\r\n  | UpdateQuote\r\n  | LoadDataSuccess\r\n  | AddQuoteSuccess\r\n  | UpdateQuoteSuccess\r\n  | DeleteQuoteSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Quote"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Quote",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_QUOTE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "UpdateQuoteSuccess-1"
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-59586c25835ddfb1531856edae43edf2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'quotes-sharing-app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'quotes-sharing-app';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- The routed views render in the <router-outlet>-->\r\n<div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CreateQuoteComponent",
            "id": "component-CreateQuoteComponent-81cf082d34ce2e7d42751053537f0ad3",
            "file": "src/app/quote/create-quote/create-quote.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-quote",
            "styleUrls": [
                "./create-quote.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-quote.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createQuoteForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "displayUpdate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "existingQuote",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "newQuote",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "quoteId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "submitted",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "createOrUpdateQuote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "gotoHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initializeCreateQuoteForm",
                    "args": [
                        {
                            "name": "existingQuote",
                            "type": "Quote",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "existingQuote",
                            "type": "Quote",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Quote } from '../../core/models/quote';\r\nimport { QuotesService } from '../../core/services/quotes.service';\r\nimport {\r\n  AddQuote,\r\n  GetQuotes,\r\n  UpdateQuote,\r\n} from '../../quote/quote-store/actions/quote.actions';\r\nimport { AppState, quoteState } from '../../sign-up/store/app.state';\r\n\r\n@Component({\r\n  selector: 'app-create-quote',\r\n  templateUrl: './create-quote.component.html',\r\n  styleUrls: ['./create-quote.component.scss'],\r\n})\r\nexport class CreateQuoteComponent implements OnInit {\r\n  existingQuote: Quote;\r\n\r\n  displayUpdate: boolean;\r\n\r\n  newQuote: Quote;\r\n\r\n  submitted: false;\r\n\r\n  createQuoteForm: FormGroup;\r\n\r\n  getState: Observable<any>;\r\n\r\n  quoteId: number;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private store: Store<AppState>,\r\n    private router: Router,\r\n    private quotesService: QuotesService\r\n  ) {\r\n    this.getState = this.store.select(quoteState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.route.snapshot.params && this.route.snapshot.params.id) {\r\n      this.quoteId = this.route.snapshot.params.id;\r\n      this.quotesService.getByQuoteId(this.quoteId).subscribe((data: Quote) => {\r\n        this.existingQuote = data;\r\n        this.initializeCreateQuoteForm(this.existingQuote);\r\n      });\r\n    }\r\n    this.initializeCreateQuoteForm(this.existingQuote);\r\n\r\n    this.store.subscribe((data) => {\r\n      if (data) {\r\n        if (data.quote.success) {\r\n          this.createQuoteForm.reset();\r\n        }\r\n      }\r\n      this.route.data.subscribe((params) => {\r\n        if (params && params.isUpdate) {\r\n          this.displayUpdate = params.isUpdate;\r\n        } else {\r\n          this.displayUpdate = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private initializeCreateQuoteForm(existingQuote?: Quote): void {\r\n    if (existingQuote) {\r\n      this.createQuoteForm = new FormGroup({\r\n        quote: new FormControl(existingQuote.quote, Validators.required),\r\n        description: new FormControl(existingQuote.description),\r\n        author: new FormControl(existingQuote.author, Validators.required),\r\n        category: new FormControl(existingQuote.category, Validators.required),\r\n      });\r\n    } else {\r\n      this.createQuoteForm = new FormGroup({\r\n        quote: new FormControl('', Validators.required),\r\n        description: new FormControl(''),\r\n        author: new FormControl('', Validators.required),\r\n        category: new FormControl('', Validators.required),\r\n      });\r\n    }\r\n  }\r\n\r\n  get quote(): string {\r\n    return this.createQuoteForm.get('quote').value;\r\n  }\r\n\r\n  get description(): string {\r\n    return this.createQuoteForm.get('description').value;\r\n  }\r\n\r\n  get author(): string {\r\n    return this.createQuoteForm.get('author').value;\r\n  }\r\n\r\n  get category(): string {\r\n    return this.createQuoteForm.get('category').value;\r\n  }\r\n\r\n  public createOrUpdateQuote(): void {\r\n    if (this.displayUpdate) {\r\n      this.newQuote = {\r\n        quote: this.quote,\r\n        description: this.description,\r\n        author: this.author,\r\n        category: this.category,\r\n        id: this.existingQuote.id,\r\n      };\r\n      this.store.dispatch(new UpdateQuote(this.newQuote));\r\n      this.store.dispatch(new GetQuotes());\r\n      this.router.navigate(['/']);\r\n    } else {\r\n      this.newQuote = {\r\n        quote: this.quote,\r\n        description: this.description,\r\n        author: this.author,\r\n        category: this.category,\r\n      };\r\n      this.store.dispatch(new AddQuote(this.newQuote));\r\n      this.store.dispatch(new GetQuotes());\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  public gotoHome(): void {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-form {\r\n    border: 1px solid lightgrey;\r\n    border-radius: 2px;\r\n    padding: 0.5rem;\r\n    .h2 {\r\n        margin: 0.5rem;\r\n    }\r\n    .col25 {\r\n        width: 25%;\r\n        float: left;\r\n    }\r\n    .col75 {\r\n        width: 75%;\r\n        float: left;\r\n    }\r\n    .col50 {\r\n        width: 50%;\r\n        float: left;\r\n    }\r\n    input {\r\n        width: 90%;\r\n        margin: 0.5rem;\r\n        padding: 0.5rem;\r\n        border: 1px solid lightgrey;\r\n        border-radius: 3px;\r\n        ;\r\n    }\r\n    .form-row {\r\n        margin: 0.5rem;\r\n    }\r\n}",
                    "styleUrl": "./create-quote.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "quotesService",
                        "type": "QuotesService"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "quotesService",
                        "type": "QuotesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "quote": {
                    "name": "quote",
                    "getSignature": {
                        "name": "quote",
                        "type": "string",
                        "returnType": "string",
                        "line": 88
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "string",
                        "returnType": "string",
                        "line": 92
                    }
                },
                "author": {
                    "name": "author",
                    "getSignature": {
                        "name": "author",
                        "type": "string",
                        "returnType": "string",
                        "line": 96
                    }
                },
                "category": {
                    "name": "category",
                    "getSignature": {
                        "name": "category",
                        "type": "string",
                        "returnType": "string",
                        "line": 100
                    }
                }
            },
            "templateData": "<div class=\"create-form form-background\">\r\n    <h2 *ngIf=\"!displayUpdate\">Create a new Quote</h2>\r\n    <h2 *ngIf=\"displayUpdate\">Update Quote</h2>\r\n    <form [formGroup]=\"createQuoteForm\">\r\n        <div class=\"form-row\">\r\n            <div class=\"col50\">\r\n                <label>Enter the Quote</label>\r\n            </div>\r\n            <div class=\"col50\">\r\n                <input type=\"text\" aria-label=\"Enter the quote\" formControlName=\"quote\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"form-row\">\r\n            <div class=\"col50\">\r\n                <label>Enter the Quote description</label>\r\n            </div>\r\n            <div class=\"col50\">\r\n                <input type=\"text\" aria-label=\"Enter the description of the quote\" formControlName=\"description\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"form-row\">\r\n            <div class=\"col50\">\r\n                <!--add for-->\r\n                <label>Enter the Quote author</label>\r\n            </div>\r\n            <div class=\"col50\">\r\n                <input aria-label=\"Enter the author of the quote\" type=\"text\" formControlName=\"author\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"form-row\">\r\n            <div class=\"col50\">\r\n                <label>Enter the category of the quote</label>\r\n            </div>\r\n            <div class=\"col50\">\r\n                <input aria-label=\"Enter the category of the quote\" type=\"text\" formControlName=\"category\" />\r\n            </div>\r\n        </div>\r\n    </form>\r\n    <button aria-label=\"Create the quote\" [disabled]=\"createQuoteForm.invalid\" (click)=\"createOrUpdateQuote()\" class=\"button-two\">\r\n    <span *ngIf=\"!displayUpdate\">Create</span>\r\n    <span *ngIf=\"displayUpdate\">Update</span>\r\n  </button>\r\n    <button aria-label=\"Create the quote\" (click)=\"gotoHome()\" class=\"button-two\">\r\n    Go back\r\n  </button>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-b8cc15e4c87a44438db518d7559335b2",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "quotes",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "gotoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "gotoSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Quote } from '../core/models/quote';\r\nimport { Logout } from '../sign-up/store/actions/user.actions';\r\nimport { AppState, selectAuthState } from '../sign-up/store/app.state';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  getState: Observable<any>;\r\n\r\n  isAuthenticated: false;\r\n\r\n  quotes: Quote[];\r\n\r\n  user = null;\r\n\r\n  errorMessage = null;\r\n\r\n  isDarkTheme = false;\r\n\r\n  constructor(private store: Store<AppState>, private router: Router) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getState.subscribe((state) => {\r\n      this.isAuthenticated = state.isAuthenticated;\r\n      this.user = state.user;\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n  }\r\n\r\n  public logout(): void {\r\n    this.store.dispatch(new Logout());\r\n  }\r\n\r\n  public gotoLogin(): void {\r\n    this.router.navigateByUrl('login');\r\n  }\r\n\r\n  public gotoSignUp(): void {\r\n    this.router.navigateByUrl('sign-up');\r\n  }\r\n  toggleTheme(): void {\r\n    this.isDarkTheme = !this.isDarkTheme;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    padding: 1rem;\r\n    overflow: hidden;\r\n    .heading-title {\r\n        font-style: italic;\r\n        font-weight: bold;\r\n        font-size: 2rem;\r\n    }\r\n    .navigation {\r\n        display: block;\r\n        .user-info {\r\n            float: right;\r\n            .button-one {\r\n                float: right;\r\n            }\r\n        }\r\n    }\r\n    .actions {\r\n        float: right;\r\n        border-radius: 0.5rem;\r\n        margin-left: 0.5rem;\r\n    }\r\n}\r\n\r\n.login {\r\n    margin-left: 0.5rem;\r\n}\r\n\r\n.quotes-section {\r\n    margin-top: 1rem;\r\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"contain-all light-mode\" [ngClass]=\"isDarkTheme ? 'dark-mode' : 'light-mode'\">\r\n    <div>\r\n        <header class=\"header\">\r\n            <span class=\"heading-title\">Quotes sharing app</span>\r\n            <button class=\"button-one actions\" (click)=\"toggleTheme()\">\r\n        <span *ngIf=\"isDarkTheme\">Use light theme</span>\r\n        <span *ngIf=\"!isDarkTheme\">Use dark theme</span>\r\n      </button>\r\n            <nav class=\"navigation\">\r\n                <div *ngIf=\"isAuthenticated; then userLoggedIn; else showLoginAndSignUp\"></div>\r\n                <ng-template #userLoggedIn>\r\n                    <div class=\"user-info\">\r\n                        <p>\r\n                            You logged in <em>{{ user.email }}!</em>\r\n                        </p>\r\n                        <button aria-label=\"Log out\" (click)=\"logout()\" class=\"button-one\">\r\n              Log out\r\n            </button>\r\n                    </div>\r\n                </ng-template>\r\n                <ng-template #showLoginAndSignUp>\r\n                    <button aria-label=\"Log in\" class=\"button-two actions\" (click)=\"gotoLogin()\">\r\n            Login\r\n          </button>\r\n                    <button aria-label=\"Sign up\" class=\"button-two actions\" (click)=\"gotoSignUp()\">\r\n            Sign up\r\n          </button>\r\n                </ng-template>\r\n            </nav>\r\n        </header>\r\n    </div>\r\n    <hr />\r\n\r\n    <div class=\"quotes-section\">\r\n        <app-quotes-list [userAuthenticated]=\"isAuthenticated\"></app-quotes-list>\r\n    </div>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "QuotesListComponent",
            "id": "component-QuotesListComponent-d0b316dce7995c029457a68ee2498931",
            "file": "src/app/quote/quotes-list/quotes-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quotes-list",
            "styleUrls": [
                "./quotes-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quotes-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "userAuthenticated",
                    "line": 22,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createQuote",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "displayMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "quotes",
                    "type": "Quote[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "quoteToUpdate",
                    "type": "Quote",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createQuoteForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteQuote",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAllQuotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "quoteCreated",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "quoteNotCreated",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateQuote",
                    "args": [
                        {
                            "name": "quoteToUpdate",
                            "type": "Quote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "quoteToUpdate",
                            "type": "Quote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Quote } from '../../core/models/quote';\r\nimport {\r\n  DeleteQuotes,\r\n  GetQuotes,\r\n} from '../../quote/quote-store/actions/quote.actions';\r\nimport { AppState, quoteState } from '../../sign-up/store/app.state';\r\n\r\n@Component({\r\n  selector: 'app-quotes-list',\r\n  templateUrl: './quotes-list.component.html',\r\n  styleUrls: ['./quotes-list.component.scss'],\r\n})\r\nexport class QuotesListComponent implements OnInit {\r\n  quotes: Quote[];\r\n\r\n  createQuote: boolean;\r\n\r\n  @Input() userAuthenticated: boolean;\r\n\r\n  displayMessage: string;\r\n\r\n  quoteToUpdate: Quote;\r\n\r\n  getState: Observable<any>;\r\n\r\n  constructor(private router: Router, private store: Store<AppState>) {\r\n    this.getState = this.store.select(quoteState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadAllQuotes();\r\n    this.createQuote = false;\r\n    this.store.subscribe((data) => {\r\n      this.quotes = data.quote.quote;\r\n    });\r\n  }\r\n\r\n  private loadAllQuotes(): void {\r\n    this.store.dispatch(new GetQuotes());\r\n  }\r\n\r\n  public deleteQuote(id: number): void {\r\n    const deleteResult = window.confirm(\r\n      'Are you sure you want to delete this quote?'\r\n    );\r\n    if (deleteResult) {\r\n      this.store.dispatch(new DeleteQuotes(id));\r\n      this.store.dispatch(new GetQuotes());\r\n    }\r\n  }\r\n\r\n  public quoteCreated(event: any): void {\r\n    this.displayMessage = event;\r\n    this.loadAllQuotes();\r\n  }\r\n\r\n  public quoteNotCreated(event: any): void {\r\n    this.displayMessage = event;\r\n  }\r\n\r\n  public createQuoteForm(): void {\r\n    this.router.navigateByUrl('create');\r\n  }\r\n\r\n  public updateQuote(quoteToUpdate: Quote): void {\r\n    this.router.navigateByUrl('update/' + quoteToUpdate.id);\r\n  }\r\n\r\n  public closeNotification(): void {\r\n    this.displayMessage = undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notification {\r\n    text-align: center;\r\n    padding: 2rem;\r\n    &.success {\r\n        background-color: green;\r\n    }\r\n    &.error {\r\n        background-color: tomato;\r\n    }\r\n}\r\n\r\ntable {\r\n    thead {\r\n        tr {\r\n            .actions {\r\n                min-width: 10rem;\r\n            }\r\n        }\r\n    }\r\n    tbody {\r\n        tr {\r\n            .actions-buttons {\r\n                padding: 0.5rem;\r\n                .update {\r\n                    margin-left: 0.5rem;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./quotes-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button aria-label=\"Create a new quote\" class=\"button-two\" *ngIf=\"userAuthenticated\" (click)=\"createQuoteForm()\">\r\n  Create new quote\r\n</button>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Quote</th>\r\n            <th>Description</th>\r\n            <th>Author</th>\r\n            <th>Category</th>\r\n            <th class=\"actions\" *ngIf=\"userAuthenticated\">Actions</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let quote of quotes\">\r\n            <td tabindex=\"0\">{{ quote.quote }}</td>\r\n            <td tabindex=\"0\">{{ quote.description }}</td>\r\n            <td tabindex=\"0\">{{ quote.author }}</td>\r\n            <td tabindex=\"0\">{{ quote.category }}</td>\r\n            <td class=\"actions-buttons\" *ngIf=\"userAuthenticated\">\r\n                <button tabindex=\"0\" aria-label=\"Delete Quote\" class=\"button-three delete\" (click)=\"deleteQuote(quote.id)\">\r\n          Delete\r\n        </button>\r\n                <button tabindex=\"0\" aria-label=\"Update Quote\" class=\"button-two update\" (click)=\"updateQuote(quote)\">\r\n          Update\r\n        </button>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-36544b767861c1fe5e29f3de0e0e703f",
            "file": "src/app/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayLogin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginUser",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signUpForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeSignUpForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loginOrRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { User } from '../core/models/User';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState, selectAuthState } from '../sign-up/store/app.state';\r\nimport { SignUp, LogIn } from './store/actions/user.actions';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  public user: User;\r\n  public loginUser: User;\r\n\r\n  public signUpForm: FormGroup;\r\n\r\n  public loginForm: FormGroup;\r\n\r\n  public errorMessage: string;\r\n\r\n  getState: Observable<any>;\r\n\r\n  displayLogin: boolean;\r\n\r\n  constructor(private store: Store<AppState>, private route: ActivatedRoute) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeSignUpForm();\r\n    this.setUserData();\r\n    this.getState.subscribe((state) => {\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n    this.errorMessage = undefined;\r\n    this.route.data.subscribe((params) => {\r\n      if (params && params.isLogin) {\r\n        this.displayLogin = params.isLogin;\r\n      } else {\r\n        this.displayLogin = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeSignUpForm(): void {\r\n    this.signUpForm = new FormGroup({\r\n      name: new FormControl(''),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  public loginOrRegister(): void {\r\n    this.setUserData();\r\n    if (this.displayLogin) {\r\n      this.store.dispatch(new LogIn(this.user));\r\n    } else {\r\n      this.store.dispatch(new SignUp(this.user));\r\n    }\r\n  }\r\n\r\n  private setUserData(): void {\r\n    this.user = {\r\n      email: this.email,\r\n      password: this.password,\r\n      name: this.name,\r\n    };\r\n  }\r\n\r\n  public resetForm(): void {\r\n    this.signUpForm.reset();\r\n  }\r\n\r\n  get name(): string {\r\n    return this.signUpForm.get('name').value;\r\n  }\r\n  get email(): string {\r\n    return this.signUpForm.get('email').value;\r\n  }\r\n  get password(): string {\r\n    return this.signUpForm.get('password').value;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\r\n    display: block;\r\n}\r\n\r\n.col50 {\r\n    width: 50%;\r\n    float: left;\r\n}\r\n\r\ninput {\r\n    width: 90%;\r\n    margin: 0.5rem;\r\n    padding: 0.5rem;\r\n    border: 1px solid lightgrey;\r\n    border-radius: 3px;\r\n}\r\n\r\n.form-row {\r\n    margin: 0.5rem;\r\n}\r\n\r\n.h2 {\r\n    margin: 0.5rem;\r\n}\r\n\r\n.action-button {\r\n    float: right;\r\n}\r\n\r\n.validator {\r\n    text-align: center;\r\n    color: tomato;\r\n}\r\n\r\n.actions {\r\n    button {\r\n        float: right;\r\n        margin: 0 0.2rem;\r\n    }\r\n}",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 77
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "string",
                        "returnType": "string",
                        "line": 80
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "string",
                        "returnType": "string",
                        "line": 83
                    }
                }
            },
            "templateData": "<div class=\"create-form form-background\">\r\n    <h3 *ngIf=\"displayLogin\">Login Form</h3>\r\n    <h3 *ngIf=\"!displayLogin\">Sign up</h3>\r\n    <hr />\r\n    <form [formGroup]=\"signUpForm\">\r\n        <div class=\"col50\" *ngIf=\"!displayLogin\">\r\n            <label for=\"name\">Name:</label>\r\n        </div>\r\n        <div class=\"col50\" *ngIf=\"!displayLogin\">\r\n            <input type=\"text\" formControlName=\"name\" placeholder=\"Enter your name\" />\r\n        </div>\r\n        <div class=\"col50\">\r\n            <label for=\"email\">Email id:</label>\r\n        </div>\r\n        <div class=\"col50\">\r\n            <input type=\"email\" formControlName=\"email\" placeholder=\"Enter your email id\" />\r\n        </div>\r\n        <div class=\"validator\" *ngIf=\"signUpForm.get('email').invalid && signUpForm.get('email').touched\">\r\n            <label>Email must be valid. Example: john@gmail.com</label>\r\n        </div>\r\n        <div class=\"col50\">\r\n            <label for=\"password\">Password:</label>\r\n        </div>\r\n        <div class=\"col50\">\r\n            <input type=\"password\" formControlName=\"password\" placeholder=\"Enter your password\" />\r\n        </div>\r\n        <div class=\"actions\">\r\n            <button aria-label=\"Sign up\" (click)=\"loginOrRegister()\" class=\"button-one\" [disabled]=\"signUpForm.invalid\">\r\n        <span *ngIf=\"!displayLogin\">Sign Up</span>\r\n        <span *ngIf=\"displayLogin\">Login</span>\r\n      </button>\r\n            <button aria-label=\"Reset form\" (click)=\"resetForm()\" class=\"button-one\">\r\n        Reset\r\n      </button>\r\n        </div>\r\n    </form>\r\n    <span class=\"validator\">{{ errorMessage }}</span>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CreateQuoteComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "QuotesListComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_QUOTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] ADD'"
            },
            {
                "name": "ADD_QUOTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] ADD'"
            },
            {
                "name": "ADD_QUOTE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] ADD QUOTE SUCCESS'"
            },
            {
                "name": "ADD_QUOTE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] ADD QUOTE SUCCESS'"
            },
            {
                "name": "DATA_LOAD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] LOAD'"
            },
            {
                "name": "DATA_LOAD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] LOAD'"
            },
            {
                "name": "DELETE_QUOTE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] DELETE QUOTE SUCCESS'"
            },
            {
                "name": "DELETE_QUOTE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] DELETE QUOTE SUCCESS'"
            },
            {
                "name": "DELETE_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] DELETE'"
            },
            {
                "name": "DELETE_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] DELETE'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "GET_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] GET'"
            },
            {
                "name": "GET_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] GET'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/reducers/quote.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  quote: [],\r\n  message: null,\r\n  success: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/reducers/quote.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  quote: [],\r\n  message: null,\r\n  success: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "quoteState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('quote')"
            },
            {
                "name": "quoteState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('quote')"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth.reducer,\r\n    quote: quote.reducer\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/store/app.state.ts",
                "type": "object",
                "defaultValue": "{\r\n  auth: auth.reducer,\r\n  quote: quote.reducer,\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "UPDATE_QUOTE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] UPDATE QUOTE SUCCESS'"
            },
            {
                "name": "UPDATE_QUOTE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] UPDATE QUOTE SUCCESS'"
            },
            {
                "name": "UPDATE_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] UPDATE'"
            },
            {
                "name": "UPDATE_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "string",
                "defaultValue": "'[QUOTE] UPDATE'"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/quote-store/reducers/quote.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/quote/quote-store/reducers/quote.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/sign-up/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                "file": "src/app/store/actions/user.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "AuthAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                "file": "src/app/sign-up/store/actions/user.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "QuoteActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddQuote | GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess",
                "file": "src/app/quote-store/actions/quote.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "QuoteActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddQuote | GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess",
                "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[AUTH] LogIn"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[AUTH] SignUp"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[AUTH] LogOut"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] SignUp Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] SignUp Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/user.actions.ts"
            },
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[AUTH] LogIn"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[AUTH] SignUp"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[AUTH] LogOut"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] SignUp Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] SignUp Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/sign-up/store/actions/user.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/quote-store/actions/quote.actions.ts": [
                {
                    "name": "ADD_QUOTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] ADD'"
                },
                {
                    "name": "ADD_QUOTE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] ADD QUOTE SUCCESS'"
                },
                {
                    "name": "DATA_LOAD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] LOAD'"
                },
                {
                    "name": "DELETE_QUOTE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] DELETE QUOTE SUCCESS'"
                },
                {
                    "name": "DELETE_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] DELETE'"
                },
                {
                    "name": "GET_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] GET'"
                },
                {
                    "name": "UPDATE_QUOTE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] UPDATE QUOTE SUCCESS'"
                },
                {
                    "name": "UPDATE_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] UPDATE'"
                }
            ],
            "src/app/quote/quote-store/actions/quote.actions.ts": [
                {
                    "name": "ADD_QUOTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] ADD'"
                },
                {
                    "name": "ADD_QUOTE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] ADD QUOTE SUCCESS'"
                },
                {
                    "name": "DATA_LOAD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] LOAD'"
                },
                {
                    "name": "DELETE_QUOTE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] DELETE QUOTE SUCCESS'"
                },
                {
                    "name": "DELETE_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] DELETE'"
                },
                {
                    "name": "GET_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] GET'"
                },
                {
                    "name": "UPDATE_QUOTE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] UPDATE QUOTE SUCCESS'"
                },
                {
                    "name": "UPDATE_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "type": "string",
                    "defaultValue": "'[QUOTE] UPDATE'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/app/quote-store/reducers/quote.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote-store/reducers/quote.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  quote: [],\r\n  message: null,\r\n  success: null\r\n}"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n    isAuthenticated: false,\r\n    user: null,\r\n    errorMessage: null\r\n}"
                }
            ],
            "src/app/quote/quote-store/reducers/quote.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/quote/quote-store/reducers/quote.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  quote: [],\r\n  message: null,\r\n  success: null,\r\n}"
                }
            ],
            "src/app/sign-up/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/store/app.state.ts": [
                {
                    "name": "quoteState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('quote')"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth.reducer,\r\n    quote: quote.reducer\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/app/sign-up/store/app.state.ts": [
                {
                    "name": "quoteState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('quote')"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/store/app.state.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  auth: auth.reducer,\r\n  quote: quote.reducer,\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/quote-store/reducers/quote.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/quote-store/reducers/quote.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/quote/quote-store/reducers/quote.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/quote/quote-store/reducers/quote.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/sign-up/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/sign-up/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/user.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[AUTH] LogIn"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[AUTH] SignUp"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[AUTH] LogOut"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] SignUp Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] SignUp Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/user.actions.ts"
                }
            ],
            "src/app/sign-up/store/actions/user.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[AUTH] LogIn"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[AUTH] SignUp"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[AUTH] LogOut"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] SignUp Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] SignUp Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/sign-up/store/actions/user.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/user.actions.ts": [
                {
                    "name": "AuthAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                    "file": "src/app/store/actions/user.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/sign-up/store/actions/user.actions.ts": [
                {
                    "name": "AuthAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                    "file": "src/app/sign-up/store/actions/user.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/quote-store/actions/quote.actions.ts": [
                {
                    "name": "QuoteActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddQuote | GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess",
                    "file": "src/app/quote-store/actions/quote.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/quote/quote-store/actions/quote.actions.ts": [
                {
                    "name": "QuoteActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddQuote | GetQuotes | DeleteQuotes | UpdateQuote | LoadDataSuccess | AddQuoteSuccess | UpdateQuoteSuccess | DeleteQuoteSuccess",
                    "file": "src/app/quote/quote-store/actions/quote.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "SignUpComponent",
                        "data": {
                            "isLogin": true
                        }
                    },
                    {
                        "path": "sign-up",
                        "component": "SignUpComponent"
                    },
                    {
                        "path": "create",
                        "component": "CreateQuoteComponent"
                    },
                    {
                        "path": "update/:id",
                        "component": "CreateQuoteComponent",
                        "data": {
                            "isUpdate": true
                        }
                    },
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/quote.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Quote",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/quotes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuotesService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/models/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/quote.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Quote",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddQuote",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddQuoteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteQuotes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteQuoteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetQuotes",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateQuote",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateQuoteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_QUOTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_QUOTE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_LOAD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_QUOTE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_QUOTE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/effects/quote.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuoteEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/quote.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuoteState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/reducers/quote.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/reducers/quote.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-store/reducers/quote.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/create-quote/create-quote.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateQuoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddQuote",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddQuoteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteQuotes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteQuoteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetQuotes",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateQuote",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateQuoteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_QUOTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_QUOTE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_LOAD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_QUOTE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_QUOTE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/actions/quote.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/effects/quote.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuoteEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/quote.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuoteState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/reducers/quote.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/reducers/quote.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quote-store/reducers/quote.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/quote/quotes-list/quotes-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuotesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/quotes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuotesService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "quoteState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "quoteState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}